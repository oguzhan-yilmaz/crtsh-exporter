name: crtsh-exporter-multi-platform-docker-build

on:
  push:
    # tags:
    #   - "v*.*.*" 
    branches:
      - debug-multiplatform-image-tags

  schedule:
    # This will run at 11:00 PM UTC every Monday.
    - cron: '0 23 * * 1'
jobs:
  crtsh-exporter-multi-platform-docker-build:
    name: crtsh-exporter
    runs-on: ubuntu-latest
    env:
      REGISTRY: "ghcr.io" 
      REPO: "oguzhan-yilmaz/crtsh-exporter" 
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set SHA_SHORT env var and get Kernel version
        id: vars
        run: |
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}
          echo "VERSION=$(uname --kernel-release)" >> ${GITHUB_ENV}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR }}
          
      - name: Buildx linux/amd64 Docker Image
        id: docker-build-push-amd64
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          build-args: |
            VERSION=${{ env.SHA_SHORT }}
            COMMIT=${{ github.sha }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.SHA_SHORT }},${{ env.REGISTRY }}/${{ env.REPO }}:latest

      - name: Buildx linux/arm64 Docker Image
        id: docker-build-push-arm64
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/arm64
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT=${{ github.sha }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.SHA_SHORT }},${{ env.REGISTRY }}/${{ env.REPO }}:latest

      - name: Buildx linux/arm64/v8 Docker Image
        id: docker-build-push-arm64-v8
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/arm64/v8
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT=${{ github.sha }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.SHA_SHORT }},${{ env.REGISTRY }}/${{ env.REPO }}:latest
        continue-on-error: true  


      - name: Install Cosign
        uses: sigstore/cosign-installer@main
      - name: Write signing key to disk (only needed for `cosign sign --key`)
        run: echo "${{ secrets.SIGNING }}" > ./cosign.key
      - name: Sign container image
        run: |
          DIGESTS=(
            ${{ steps.docker-build-push-amd64.digest }}
            ${{ steps.docker-build-push-arm64.digest }}
            ${{ steps.docker-build-push-arm64-v8.digest }}
          )
          for DIGEST in "${DIGESTS[@]}"
          do
            cosign sign \
            --yes \
            --key=./cosign.key \
            --annotations="repo=${{ github.repository }}" \
            --annotations="workflow=${{ github.workflow }}" \
            --annotations="commit=${{ github.sha }}" \
            --annotations="version=${{ env.VERSION }}" \
            ${{ env.REGISTRY }}/${{ env.REPO }}@${DIGEST}
          done
        env:
          COSIGN_PASSWORD: ""
      
      - name: revise occurrences of the image
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Actions"

          for FILENAME in "./README.md"
          do
            sed \
            --in-place \
            "s|${{ env.REGISTRY }}/${{ env.REPO }}:[0-9a-f]\{7\}|${{ env.REGISTRY }}/${{ env.REPO }}:${{ env.SHA_SHORT }}|g" \
            ${FILENAME}
            git add ${FILENAME}
          done

          git commit --message "GitHub Actions update image references"
          git push origin master
